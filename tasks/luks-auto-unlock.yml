- name: Install expect
  apt:
    pkg:
      - expect

- name: Install python-pexpect (python2)
  apt: pkg=python-pexpect
  when: ansible_python.version.major == 2

- name: Install python3-pexpect (python3)
  apt: pkg=python3-pexpect
  when: ansible_python.version.major == 3

- name: Find root-partition crypt device
  shell: |
    root=$(grep -o "root=[^ ]*" /proc/cmdline | cut -d "=" -f2);
    lsblk --inverse --paths --noheadings "$root" | sed 's/^[└─ `-]*//g' | awk '$6=="crypt" {getline; print $1}'
  changed_when: false
  register: cryptroot

- name: Check if found partition is valid luks device
  command: cryptsetup luksDump {{ cryptroot.stdout }}
  changed_when: false

- name: Get crypt mapper name
  shell: |
    root=$(grep -o "root=[^ ]*" /proc/cmdline | cut -d "=" -f2);
    lsblk --inverse --noheadings "$root" | sed 's/^[└─ `-]*//g' | awk '$6=="crypt" {print $1}'
  changed_when: false
  register: cryptroot_mapper_name

- name: Create /crypto_keyfile.bin
  command:
    cmd: dd bs=512 count=4 if=/dev/urandom of=/crypto_keyfile.bin
    creates: /crypto_keyfile.bin
  register: crypto_keyfile

- name: Check if unlock works
  command:
    cmd: cryptsetup open --test-passphrase --key-file /crypto_keyfile.bin {{ cryptroot.stdout }}
  changed_when: false
  failed_when: false
  register: luks_unlock_check

# we cannot use the master key on LUKS2 (https://access.redhat.com/solutions/1543373)
- name: prompt for luks password
  pause:
    prompt: Enter LUKS password
    echo: no
  no_log: True
  register: luks_pass
  when: luks_unlock_check.rc != 0

- name: Add crypto keyfile to luks
  expect:
    command: cryptsetup luksAddKey {{ cryptroot.stdout }} /crypto_keyfile.bin
    responses:
      passphrase: "{{ luks_pass.user_input }}"
  no_log: True
  when: luks_unlock_check.rc != 0

- name: Secure crypto keyfile
  file:
    path: /crypto_keyfile.bin
    mode: 0000

- name: Secure /boot
  file:
    path: /boot
    mode: g-rwx,o-rwx
    recurse: yes

- name: Update /etc/crypttab
  replace:
    path: /etc/crypttab
    regexp: '^({{ cryptroot_mapper_name.stdout }}.*) none luks(,discard)?'
    replace: '\1 /crypto_keyfile.bin luks,keyscript=/bin/cat'

- name: Create /etc/initramfs-tools/hooks/crypto_keyfile
  copy:
    dest: /etc/initramfs-tools/hooks/crypto_keyfile
    mode: +x
    content: |
      #!/bin/sh
      cp /crypto_keyfile.bin "${DESTDIR}"

- name: Update-initramfs
  command: update-initramfs -u
  when: crypto_keyfile is changed

- name: reboot to check if automatic unlock works
  reboot:
  when: auto_unlock_reboot and crypto_keyfile is changed
